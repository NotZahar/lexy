const api="https://godbolt.org/api/",compiler_id="clang_trunk",lexy_id={id:'lexy',version:'trunk'};async function fetch_local_file(t){const e=await fetch(t);return e.ok?await e.text():""}function json_stringify(t){var e=JSON.stringify(t),e=e.replace(/[\u0080-\uFFFF]/g,function(e){return"\\u"+("0000"+e.charCodeAt(0).toString(16)).substr(-4)});return e}export function list_of_productions(n){var e,t=[];const s=/(struct|class) ([a-zA-Z0-9_]+)/g;for(e=void 0;e=s.exec(n);)t.push(e[2]);return t}export async function preprocess_source(n,e,t){if(n=='playground'){const n=await fetch_local_file('/cpp/playground_headers.single.hpp'),s=`#define LEXY_PLAYGROUND_PRODUCTION ${t}`,o=await fetch_local_file('/cpp/playground_prefix.cpp'),i=await fetch_local_file('/cpp/playground_main.cpp');return n+'\n'+s+'\n'+o+'\n'+e+'\n'+i}const s=`#define LEXY_PLAYGROUND_PRODUCTION ${t}`,o=await fetch_local_file('/cpp/godbolt_prefix.cpp'),i=await fetch_local_file('/cpp/godbolt_main.cpp');return s+'\n'+o+e+'\n'+i}export async function compile_and_run(a,r,c){var n,o,i,e={};e.source=a,e.options={},e.options.userArguments="-fno-color-diagnostics -std=c++20",e.options.executeParameters={args:[c],stdin:r},e.options.compilerOptions={executorRequest:!0},e.options.filters={execute:!0},e.options.tools=[],e.options.libraries=[lexy_id],e.lang="c++";const s=await fetch(`${api}/compiler/${compiler_id}/compile`,{method:"POST",headers:{'Content-Type':'application/json',Accept:'application/json'},body:json_stringify(e)});if(!s.ok)return{success:!1,message:`Compiler Explorer error: ${s.status} - ${s.statusText}`};const t=await s.json();return t.didExecute?t.code==3?(n=t.stderr.map(e=>e.text).join("\n"),{success:!1,message:n}):(o=t.stdout.map(e=>e.text).join("\n"),i=t.stderr.map(e=>e.text).join("\n"),{success:!0,stdout:o,stderr:i,code:t.code}):(n=t.buildResult.stderr.map(e=>e.text).join("\n"),{success:!1,message:n})}function get_godbolt_clientstate(n,s){var t,e={};return e.id=1,e.language="c++",e.source=n,e.compilers=[],t={},t.id=compiler_id,t.libs=[lexy_id],t.options="-std=c++20",e.executors=[{compiler:t,stdin:s,stdinVisible:!0}],{sessions:[e]}}export async function get_godbolt_permalink(e,t){const s=get_godbolt_clientstate(e,t),n=await fetch(api+"shortener",{method:"POST",headers:{"Content-Type":"application/json",Accept:"application/json"},body:json_stringify(s)});return n.ok?(await n.json()).url:get_godbolt_url(e,t)}export function get_godbolt_url(e,t){const n=get_godbolt_clientstate(e,t),s=json_stringify(n);return"https://godbolt.org/clientstate/"+encodeURIComponent(btoa(s))}export async function load_example(n){const e=/\/\/ INPUT:(.*)\n/,t=await fetch_local_file(n),s=t.replace(e,''),o=(e.exec(t)?.[1]??"").replaceAll("\\n","\n");return{grammar:s.trim(),input:o,production:"production"}}export async function load_godbolt_url(o){const t=await fetch(api+"shortlinkinfo/"+o);if(!t.ok)return{grammar:"",input:"",production:""};const i=await t.json(),s=i.sessions[0],n=s.source,a=s.executors[0].stdin,r=/#define LEXY_PLAYGROUND_PRODUCTION ([a-zA-Z_0-9]+)/,c=r.exec(n)[1],l=/\/\/=== grammar ===\/\/([^]*)\/\/=== main function ===\/\//;let e=l.exec(n)[1];return e=e.trim(),{grammar:e,input:a,production:c}}